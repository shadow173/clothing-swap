datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TokenType {
  EMAIL_VERIFICATION
  UPLOAD_KEY
}

model Token {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  // Info
  type        TokenType
  value       String
  destination String
  createdAt   DateTime  @default(now())
}

enum RoleType {
  VERIFIED
  USER
  PREMIUM
  BANNED
  DISABLED
  ADMIN
}

model User {
  id          String     @id @default(uuid())
  uid         Int        @default(autoincrement())
  // Info
  email       String     @unique
  username    String     @unique
  firstName   String
  lastName    String
  phoneNumber String     @unique
  password    String
  roles       RoleType[]
  lastLogin   DateTime?
  createdAt   DateTime   @default(now())
  itemsSold   Int
  // Children
  settings    Settings?
  files       File[]
  items       Item[]

  tokens   Token[]
  sessions Session[]
}

enum ObjectKeyFormat {
  DEFAULT
  NUMBERS
  ALPHANUMERIC
  LOWERCASE
  UPPERCASE
}

model Settings {
  id                  String          @id @default(uuid())
  user                User            @relation(fields: [id], references: [id])
  // Info
  objectKeyLength     Int             @default(7)
  objectKeyFormat     ObjectKeyFormat @default(DEFAULT)
  showURL             Boolean         @default(false)
  invisibleURL        Boolean         @default(false)
  embed               Boolean         @default(false)
  selectedEmbedPreset Int             @default(1)
  randomEmbedPreset   Boolean         @default(false)
  updatedAt           DateTime        @updatedAt
}

model File {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  // Info
  name         String
  originalName String
  mimetype     String
  size         Int
  views        Int
  createdAt    DateTime @default(now())
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // Info
  token     String   @unique
  ip        String
  userAgent String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Item {
  id          String  @id @default(uuid())
  // Info
  title       String
  description String
  price       Decimal
  userId      String
  //fileId      String
  user        User    @relation(fields: [userId], references: [id])
  //file        File    @relation(fields: [fileId], references: [id])
}
